using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SpConsole
{
    public class Engine
    {

        public List<string> Seeds
        {
            get; set;
        }
        public int Version { get; }
        private List<string> GetCombinedSeed()
        {
            var ls = new List<string>();
            ls.AddRange(GetSeedV2());
            ls.AddRange(GetSeedV1());

            return ls;
        }
        public Engine(int version = 1)
        {
            Seeds = version switch
            {
                1 => GetSeedV1(),
                2 => GetSeedV2(),
                0 => GetCombinedSeed(),
                _ => throw new Exception("Invalid version selected")

            };
            Version = version;
        }
        /// <summary>
        /// Fix is a space-separated 1 XX 2 combo string
        /// </summary>
        /// <param name="fix"></param>
        /// <returns></returns>
        public Score GetScore(string fix)
        {
            var result = new Score(0, 0, 0, 0);
            if (string.IsNullOrWhiteSpace(fix)) return result;

            var rand = new Random();
            var part1 = fix.Substring(0, fix.Length);
            //var part2 = "3.10 1.99 3.50 2";
            var selectSpace = Seeds.Where(x => x.Substring(0, x.Length - 2) == fix).ToList();
            if (!selectSpace.Any()) return result;
            //shuffle
            var item = selectSpace.Select(x => new { Number = rand.Next(), Item = x })
            .OrderBy(x => x.Number)
            .Select(x => x.Item)
            .Take(1)
            .FirstOrDefault();

            if (string.IsNullOrWhiteSpace(item)) return result;

            //get percent of the randomly-outed score...
            var percentScore = CalculatePercentScore(selectSpace, item);

            int.TryParse(item.Split(" ")[3], out var score);

            result = new Score(score, percentScore.Item1, percentScore.Item2, percentScore.Item3);

            return result;
        }

        private Tuple<double, int, int> CalculatePercentScore(List<string> seeds, string item)
        {
            var a = seeds.Count(x => x == item);
            var b = seeds.Count();
            var res = (a * 100) / b;

            return new Tuple<double, int, int>(res, a, b);
        }

        public List<string> GetSeedV1()
        {
            return new List<string>
            {
                "3.10 1.99 3.50 2","3.33 2.15 3.10 2","3.30 2.10 3.00 2","3.10 1.89 4.25 2","3.30 2.10 3.25 1","3.40 2.15 3.10 1","3.25 2.05 3.40 2","3.25 2.05 3.10 2","3.25 2.05 3.20 2","3.25 2.05 3.40 2","3.25 2.05 3.50 2","3.10 1.99 3.50 2","3.30 2.05 3.10 2","3.10 1.95 3.70 1","3.25 2.05 3.90 2","3.40 2.15 3.40 2","3.30 2.05 3.40 2","3.10 1.93 3.75 2","3.00 1.90 3.90 2","3.10 2.00 3.40 2","3.00 1.92 3.90 2","3.30 2.10 3.00 1","3.20 2.05 3.80 1","3.20 2.00 3.90 1","3.25 2.05 3.10 2","3.40 2.10 3.33 2","3.00 1.87 4.10 2","3.33 2.10 3.33 1","3.10 1.98 3.80 1","3.10 1.95 3.70 2","3.25 2.10 3.30 1","3.20 2.05 3.30 2","3.20 2.00 4.10 1","3.25 2.05 3.20 1","3.25 2.10 3.80 1","3.20 2.05 3.40 2","3.33 2.15 3.50 1","3.25 2.10 3.10 2","3.20 2.05 3.40 2","3.50 2.20 3.10 2","3.33 2.10 3.70 1","3.30 2.10 3.70 2","3.25 2.10 3.10 2","3.30 2.05 3.90 1","3.30 2.05 3.50 1","3.20 2.05 3.50 1","3.20 1.95 4.50 2","3.20 2.10 3.33 2","3.33 2.15 3.10 1","3.50 2.15 3.33 1","3.33 2.10 3.70 1","3.25 2.00 4.10 2","3.50 2.25 3.10 1","3.30 2.10 3.75 2","3.30 2.10 3.75 2","3.33 2.05 3.80 2","3.40 2.10 3.60 1","3.25 1.99 4.20 2","3.25 2.05 4.00 2","3.40 2.15 3.40 2","3.30 2.05 3.80 2","3.25 2.05 4.00 1","3.30 2.10 3.75 1","3.33 2.05 3.75 2","3.33 2.05 3.75 2","3.30 2.05 3.80 2","3.25 2.05 4.00 2","3.30 2.05 3.90 2","3.40 2.10 3.50 2","3.25 2.05 3.90 2","3.25 2.05 3.90 2","3.30 2.10 3.00 2","3.10 1.89 4.25 2","3.10 1.99 3.50 2","3.25 2.05 3.40 2","3.40 2.15 3.10 1","3.30 2.10 3.25 1","3.20 2.05 3.40 2","3.33 2.15 3.50 1","3.25 2.10 3.10 2","3.20 2.05 3.40 2","3.50 2.20 3.10 2","3.33 2.10 3.70 1","3.30 2.10 3.70 2","3.25 2.10 3.10 2","3.40 2.10 3.50 2","3.20 2.05 3.50 1","3.20 1.95 4.50 2","3.30 2.05 3.50 1","3.20 2.10 3.33 2","3.20 2.05 3.20 2","3.10 1.93 3.75 1","3.25 2.05 3.40 0","3.20 1.96 4.00 2","3.33 2.05 3.80 2","3.40 2.15 3.40 2","3.33 2.10 3.10 0","3.20 2.05 3.40 1","3.40 2.15 3.25 0","3.40 2.20 3.10 0","3.25 2.10 3.10 2","3.10 2.05 3.40 2","3.10 1.94 3.70 2","3.00 1.85 4.25 2","3.10 2.00 3.60 0","3.20 2.05 3.25 0","3.10 2.00 3.50 2","3.25 2.05 3.50 2","3.10 1.91 3.80 1","3.20 2.00 3.60 1","3.10 2.00 3.75 2","3.20 2.00 3.60 2","3.10 2.00 4.00 0","3.33 2.05 3.75 1","3.40 2.10 3.60 2","3.40 2.10 3.50 0","3.30 2.15 3.60 1","3.40 2.15 3.40 2","3.40 2.20 3.33 1","3.20 1.98 4.30 0","3.20 1.97 4.30 0","3.50 2.25 3.10 1","3.30 2.10 3.70 1","3.30 2.05 3.90 2","3.20 1.94 4.50 2","3.25 1.97 4.25 0","3.30 2.00 4.00 1","3.00 1.91 3.90 2","3.20 2.00 3.75 2","3.25 2.05 3.40 1","3.30 2.05 3.60 2","3.20 2.00 3.30 0","3.25 2.05 3.20 0","3.00 1.91 3.90 0","3.00 1.84 4.30 2","3.10 2.00 3.40 2","3.20 2.05 3.30 1","3.20 2.00 3.60 1","3.30 2.05 3.50 0","3.40 2.15 3.30 2","3.33 2.10 3.40 2","3.25 2.10 3.10 0","3.00 1.92 3.90 1","3.25 2.05 3.33 0","3.10 1.97 3.70 2","3.10 1.96 3.60 1","3.20 2.05 3.20 0","3.40 2.15 3.10 1","3.20 2.05 3.40 2","3.10 1.96 3.60 1","3.10 1.94 3.70 2","3.10 1.96 3.60 2","3.10 1.97 3.80 2","3.10 1.97 3.90 1","3.20 2.00 3.50 2","3.25 2.05 3.33 2","3.20 2.05 3.40 1","3.25 2.05 3.40 2","3.20 2.00 3.30 2","3.20 2.00 3.33 0","3.20 2.00 3.33 2","3.20 2.00 3.60 0","3.25 2.00 3.50 2","3.25 2.00 3.50 2","3.25 2.05 3.40 1","3.30 2.05 3.33 0","3.30 2.10 3.25 1","3.20 1.95 4.10 1","3.40 2.25 2.65 2","3.25 2.10 3.10 2","3.25 2.05 3.10 1","3.25 2.05 3.20 0","3.20 2.00 3.90 0","3.25 2.10 3.50 2","3.25 2.10 3.70 1","3.30 2.10 3.25 1","3.10 2.05 3.40 2","3.30 2.10 3.25 1","3.33 2.10 3.70 1","3.33 2.10 3.70 2","3.25 2.10 3.70 1","3.50 2.20 3.30 2","3.00 1.87 4.10 1","3.10 1.93 3.70 2","3.10 1.90 3.90 0","3.10 1.89 3.90 0","2.90 1.93 4.00 0","3.10 1.98 3.50 0","3.30 2.10 2.95 2","3.10 2.00 3.40 2","3.20 2.00 3.40 2","3.33 2.10 2.95 2","3.25 2.05 4.00 1","3.10 2.05 3.60 2","3.33 2.10 3.60 1","3.10 1.92 4.10 1","3.25 2.05 3.40 1","3.20 2.00 3.60 0","3.20 2.00 3.90 2","3.33 2.10 3.33 1","3.50 2.25 2.95 0","3.30 2.10 3.25 1","3.10 1.92 3.75 2","3.33 2.10 3.20 2","3.10 1.96 3.90 1","3.20 2.10 3.20 2","3.33 2.10 3.50 1","3.30 2.10 3.50 2","3.25 2.00 3.75 2","3.00 1.84 4.30 2","3.10 1.91 3.80 0","3.10 1.98 3.80 2","3.10 1.95 3.90 0","3.20 1.99 3.90 0","3.25 2.10 3.33 0","3.00 1.97 3.60 1","3.25 2.05 3.50 0","3.20 2.10 3.10 2","3.20 1.98 3.70 2","3.10 1.98 3.50 1","3.00 1.89 4.00 1","3.40 2.15 3.00 1","3.10 1.97 3.60 2","3.10 1.98 3.60 0","3.00 1.97 3.60 0","3.10 1.99 3.60 0","3.10 2.05 3.30 1","3.30 2.25 2.75 1","3.30 2.05 3.60 0","3.40 2.15 3.50 2","3.30 2.05 3.60 0","3.40 2.15 3.50 2","3.20 2.05 3.50 2","3.10 1.92 4.00 2","3.40 2.15 3.00 2","3.10 1.87 4.30 2","3.50 2.15 3.40 2","3.10 1.94 3.90 0","3.20 1.94 3.90 2","3.10 1.93 3.90 2","3.10 1.93 3.70 0","3.10 1.97 3.50 2","3.10 1.93 3.70 0","3.10 1.91 3.80 2","3.20 1.98 3.50 2","3.10 1.94 3.70 2","3.10 1.99 3.50 1","3.10 1.95 3.60 2","3.10 1.96 3.60 1","3.10 2.00 3.50 1","3.00 1.82 4.40 1","3.00 1.87 4.00 2","3.00 1.85 4.20 2","3.20 1.97 3.75 1","3.30 2.15 3.60 1","3.10 1.89 3.90 0","3.25 2.10 3.60 2","3.30 2.05 3.60 0","3.10 1.98 3.75 2","3.40 2.10 3.60 2","3.30 2.05 4.00 0","3.20 2.00 4.20 2","3.33 2.10 3.50 1","3.33 2.05 3.70 0","3.30 2.10 3.25 0","3.25 2.00 3.80 2","3.20 2.00 4.00 1","3.33 2.05 3.70 2","3.25 2.05 3.40 0","3.20 1.97 3.75 2","3.25 2.00 4.10 1","3.10 1.85 4.50 2","3.00 1.98 3.60 2","3.40 2.10 3.33 0","3.40 2.15 3.25 1","3.40 2.15 3.25 1","3.20 2.05 3.30 2","3.10 1.99 3.60 2","3.10 2.05 3.25 2","3.10 1.91 3.80 1","3.00 1.80 4.50 2","3.10 1.91 3.80 1","3.10 1.94 3.60 1","3.10 1.89 4.20 2","3.10 1.90 3.90 2","3.10 2.00 3.40 2","3.10 1.97 3.50 1","3.20 1.99 3.70 2","3.25 2.00 3.50 2","3.20 1.99 3.70 2","3.20 1.95 3.80 0","3.10 1.91 4.00 0","3.10 1.93 4.00 1","3.10 2.05 3.40 2","3.10 1.93 3.70 1","3.10 1.92 3.80 0","3.25 2.10 3.10 2","3.10 2.00 3.50 2","3.20 2.05 3.25 2","3.00 1.84 4.30 2","3.25 2.10 3.30 0","3.20 2.05 3.30 2","3.20 2.00 3.33 1","3.10 2.05 3.33 1","3.10 1.92 3.80 1","3.10 1.92 3.80 1","3.10 1.96 3.50 2","3.10 1.99 3.50 0","3.10 1.93 3.70 2","3.10 1.99 3.50 1","3.10 1.98 3.50 1","3.10 1.96 3.60 1","3.10 1.93 3.80 1","3.20 2.00 3.50 2","3.20 2.00 3.60 0","3.20 2.00 3.60 2","3.20 2.05 3.25 1","3.25 2.05 3.10 1","3.25 2.05 3.20 0","3.00 1.94 3.75 1","3.10 1.98 3.50 1","3.20 2.00 3.40 1","3.10 2.00 3.50 1","3.10 2.00 3.50 0","3.10 1.95 3.60 1","3.40 2.20 2.95 0","3.25 2.10 3.10 1","3.10 1.90 3.90 2","3.10 1.96 3.60 2","3.10 1.99 3.50 2","3.20 2.05 3.20 2","3.10 2.05 3.30 0","3.10 2.00 3.70 2","3.20 1.99 3.40 0","3.00 1.85 4.20 2","3.10 2.00 3.50 1","3.10 1.89 3.80 2","3.33 2.05 3.80 1","3.40 2.10 3.70 1","3.33 2.10 3.60 2","3.40 2.10 3.60 2","3.50 2.15 3.33 1"
            };
        }

        public List<string> GetSeedV2()
        {
            return new List<string>
            {
                "3.30 2.05 3.60 X",
                "3.40 2.15 3.50 2",
                "3.20 2.05 3.50 2",
                "3.10 1.92 4.00 2",
                "3.40 2.15 3.00 2",
                "3.10 1.87 4.30 2",
                "3.50 2.15 3.40 2",
                "3.10 1.94 3.90 X",
                "3.20 1.94 3.90 2",
                "3.10 1.93 3.90 2",
                "3.10 1.93 3.70 X",
                "3.10 1.97 3.50 2",
                "3.10 1.93 3.70 X",
                "3.10 1.91 3.80 2",
                "3.20 1.98 3.50 2",
                "3.10 1.94 3.70 2",
                "3.10 1.99 3.50 1",
                "3.10 1.95 3.60 2",
                "3.10 1.96 3.60 1",
                "3.10 2.00 3.50 1",
                "3.00 1.82 4.40 1",
                "3.00 1.87 4.00 2",
                "3.00 1.85 4.20 2",
                "3.20 1.97 3.75 1",
                "3.30 2.15 3.60 1",
                "3.30 2.15 3.10 2",
                "3.10 1.89 3.90 X",
                "3.25 2.10 3.60 2",
                "3.30 2.05 3.60 X",
                "3.10 1.98 3.75 2",
                "3.40 2.10 3.60 2",
                "3.30 2.05 4.00 X",
                "3.20 2.00 4.20 2",
                "3.33 2.10 3.50 1",
                "3.33 2.20 2.95 2",
                "3.25 2.15 3.33 0",
                "3.40 2.25 3.10 0",
                "3.60 2.25 2.95 1",
                "3.50 2.25 2.90 2",
                "3.20 2.05 3.50 2",




            };
        }

        public override string ToString()
        {
            return string.Join("\n", Seeds);
        }

    }
}
